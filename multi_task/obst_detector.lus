-- mdl2lus - 2014 ver. 0.41 (SHA 79444ea)
-- Thu Feb 11 18:43:36 2016
const black_threshold : real;
const white_threshold : real;
const obstacle_threshold : real;
node obst_detector(Co: real; Cg: real) returns (obstacle: bool);
var
   w_000: real;
   w_001: bool;
   w_002: real;
   w_003: bool;
   w_004: bool;
let
   w_000 = Cg;
   w_004 = WBW(w_000, w_003);
   w_002 = Co;
   w_001 = Obstacle_detector(w_002, w_003);
   w_003 = (false -> (pre w_004));
   obstacle = w_001;
tel
node Obstacle_detector(Co: real; R: bool) returns (obstacle_detected: bool);
var
   w_000: bool;
   w_001: bool;
   w_002: bool;
   w_003: real;
let
   w_002 = mem(w_000, w_001);
   w_003 = Co;
   w_001 = R;
   w_000 = (w_003 < obstacle_threshold);
   obstacle_detected = w_002;
tel
node WBW(Cg: real; R: bool) returns (WBW: bool);
var
   w_000: bool;
   w_001: bool;
   w_002: bool;
   w_003: bool;
   w_004: bool;
   w_005: bool;
   w_006: real;
let
   w_006 = Cg;
   w_003 = white0(w_006, w_005);
   WBW = w_000;
   w_002 = (w_004 and w_003);
   w_001 = white1(w_006, w_005);
   w_004 = black(w_006, w_005);
   w_005 = R;
   w_000 = (w_001 and w_002);
tel
node mem(S: bool; R: bool) returns (Q: bool);
var
   w_000: bool;
   w_001: bool;
   w_002: bool;
   w_003: bool;
   w_004: bool;
   w_005: bool;
let
   Q = w_002;
   w_000 = (not w_001);
   w_003 = S;
   w_002 = (w_005 and w_000);
   w_001 = R;
   w_004 = (false -> (pre w_002));
   w_005 = (w_003 or w_004);
tel
node black(Cg: real; R: bool) returns (Out1: bool);
var
   w_000: bool;
   w_001: real;
   w_002: bool;
   w_003: bool;
let
   w_001 = Cg;
   w_003 = mem_02(w_000, w_002);
   Out1 = w_003;
   w_002 = R;
   w_000 = (w_001 <= black_threshold);
tel
node white1(Cg: real; R: bool) returns (Out1: bool);
var
   w_000: bool;
   w_001: real;
   w_002: bool;
   w_003: bool;
let
   w_001 = Cg;
   w_003 = mem_01(w_000, w_002);
   Out1 = w_003;
   w_002 = R;
   w_000 = (w_001 >= white_threshold);
tel
node white0(Cg: real; R: bool) returns (Out1: bool);
var
   w_000: bool;
   w_001: real;
   w_002: bool;
   w_003: bool;
let
   w_001 = Cg;
   w_003 = mem_03(w_000, w_002);
   Out1 = w_003;
   w_002 = R;
   w_000 = (w_001 <= white_threshold);
tel
node mem_02(S: bool; R: bool) returns (Q: bool);
var
   w_000: bool;
   w_001: bool;
   w_002: bool;
   w_003: bool;
   w_004: bool;
   w_005: bool;
let
   Q = w_002;
   w_000 = (not w_001);
   w_003 = S;
   w_002 = (w_005 and w_000);
   w_001 = R;
   w_004 = (false -> (pre w_002));
   w_005 = (w_003 or w_004);
tel
node mem_01(S: bool; R: bool) returns (Q: bool);
var
   w_000: bool;
   w_001: bool;
   w_002: bool;
   w_003: bool;
   w_004: bool;
   w_005: bool;
let
   Q = w_002;
   w_000 = (not w_001);
   w_003 = S;
   w_002 = (w_005 and w_000);
   w_001 = R;
   w_004 = (false -> (pre w_002));
   w_005 = (w_003 or w_004);
tel
node mem_03(S: bool; R: bool) returns (Q: bool);
var
   w_000: bool;
   w_001: bool;
   w_002: bool;
   w_003: bool;
   w_004: bool;
   w_005: bool;
let
   Q = w_002;
   w_000 = (not w_001);
   w_003 = S;
   w_002 = (w_005 and w_000);
   w_001 = R;
   w_004 = (false -> (pre w_002));
   w_005 = (w_003 or w_004);
tel
